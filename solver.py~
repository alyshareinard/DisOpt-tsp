#!/usr/bin/python
# -*- coding: utf-8 -*-

import math
from collections import namedtuple
from operator import itemgetter, attrgetter
import numpy 

Point = namedtuple("Point", ['ind', 'x', 'y'])

def length(point1, point2):
    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)

def solve_it(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    lines = input_data.split('\n')

    nodeCount = int(lines[0])

    points = []
    for i in range(1, nodeCount+1):
        line = lines[i]
        parts = line.split()
        points.append(Point(i-1, float(parts[0]), float(parts[1])))

    #let's order the points by x coordinate, then by y coordinate
    points_sorted=sorted(points, key=attrgetter('x', 'y'))


    distance_array=numpy.zeros((nodeCount, nodeCount))
    for i in range(nodeCount):
        for j in range(nodeCount):
            distance_array[i,j]=length(points[i], points[j])
            if i==j:
                distance_array[i,j]=9999
    print distance_array


    min_distances=[]    
    for i in range(nodeCount):
        temp=min(distance_array[:,i])
        print "temp", temp
        val, idx=min((val, idx) for (idx, val) in enumerate(distance_array[:,i]))
        print "val, idx", val, idx
        min_distances.append(idx)
        print "min_distnace", min_distances
        #now black out the other options
        distance_array[idx,:]=9999
        print distance_array
    print "min_ditances", min_distances
        

        

    #now find the smallest values
    
    best_solution=[]
    print "points", points
    for i in range(nodeCount):
#        print "points_sorted.index", i, points_sorted[i].ind
        best_solution.append(points_sorted[i].ind)
    
    # build a trivial solution
    # visit the nodes in the order they appear in the file
#    solution = best_solution
    solution=range(nodeCount)
    
#    solution=min_distances

    # calculate the length of the tour
    obj = length(points[solution[-1]], points[solution[0]])
    print "obj", obj
    for index in range(0, nodeCount-1):
        obj += length(points[solution[index]], points[solution[index+1]])
        print "+", length(points[solution[index]], points[solution[index+1]])

    # prepare the solution in the specified output format
    output_data = str(obj) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, solution))

    return output_data


import sys

if __name__ == '__main__':
    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        input_data_file = open(file_location, 'r')
        input_data = ''.join(input_data_file.readlines())
        input_data_file.close()
        print solve_it(input_data)
    else:
        print 'This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/tsp_51_1)'

